Chrome内核浏览器串口通信插件，基于跨平台的插件通用开发框架-牛插(PluginOK)中间件(https://github.com/wangzuohuai/WebRunLocal)开发，底层实现调用了微软串口通讯控件MSComm32.ocx。也可以用在FireFox、Opera、Edge、IE等浏览器中。通过此插件，可以在各种浏览器中通过JS非常方便的操作com口打印机、GSM 猫、手机、串口扫描枪、串口屏显、钱箱等设备。插件中涉及到的属性等含义，请直接参考 微软串口通讯控件MSComm32.ocx中的定义，也可以参考这里：https://blog.csdn.net/shenziheng1/article/details/52884444

以下是体验插件步骤：
1、访问测试网页 http://local.zorrosoft.com/ 下载最新的演示版并按TestWrl.txt说明安装好中间件；

2、请求安装串口插件，在测试页面上输入 ws://localhost?sid=123&flag=1 先连接上中间件服务，然后输入一下内容点击发送：

{"req":"Plugin_Install","rid":1,"para":{"Name":"串口通讯Chrome插件","PID":"C0B01CD6-7DD9-4D3C-B668-04168D5236FC","Date":"2019-11-25","Desc":"基于PluginOK中间件之上用于串口通信的Chrome浏览器插件","DownAddr":"http://local.zorrosoft.com/Files/Plugin/WrlComm.pid","MD5":"264FBE10CD67D7FD961A8729B1B24776","Version":"1.1.1.2","Size":753664,"Type":1,"Cookie":"","Auth":"","TK":"0568601A3628E444AD29746C315A8C0C72DC63ADC1BDE708F650C30FF2AD9F4D76272820123195ECFCE660F5F8AE33BBA00C077989951D94100F6CC14073E94682573A4524471FA48B4599226FC0CAA898B2B6CCFCEB49CC27BDA81F8C10FD7D89D750E6C82691E6D404DED1815B798C7DF581A8566E06BFB0A6B01B27A84E68F74C1164AE92641F7C4042E89209DC6FD2186CC8D9F0A667C36A1322E2B6869CAEF16F9DF09DB0ED082EB899A0B363FE447357FD20999077F34A1D8E6A0D4F5A7A7C68CCA68FBDFC95F621D423406479EC80D4F2BFE92180F7C74A2D192EC5A920B6B2D82765EC506E423340FE551C2ECED091F815085C9453AABAB487063427"}}

3、请求串口插件更新：

{"req":"Plugin_Update","rid":1,"para":{"Name":"串口通讯Chrome插件","PID":"C0B01CD6-7DD9-4D3C-B668-04168D5236FC","Date":"2019-11-25","Desc":"基于PluginOK中间件之上用于串口通信的Chrome浏览器插件","DownAddr":"http://local.zorrosoft.com/Files/Plugin/WrlComm_Update.pid","MD5":"34FE93279F0EC49582AB52D6A32C02D8","Version":"1.1.1.2","Size":622592,"Type":1,"Cookie":"","Auth":"","TK":"9E51197D163C313DDA514F86C53BDB99E0ED468204A0F98AB2D87C4C62A93AF9D51A2FFFA9C6BFD7B1498EAF0B1C995FFD3839BF6E07ACDE0CE35A8996557C480584C64B23AD0DFA81C581B3DA9E4D265F216871B565596E68A64A6C3A0F0DA4188FEB3052B0B09D4820B1F9EBBA681141318007E6C792680B6948ED4EEAFF45B14528F1217F721516B0B168F35C388B0038A087D18AA76E2857D12B29FA070D222ADA3214D3AD04B48B42F7D2756C905BA9A0B2ADC13FB0BA1AC0D3E1258FB7AA4F6602A6953DBD7EF1F332242EA4AE2CB282CBA83323735C4EE21880CDAAA1A31157026B95A52409D0FE4230860721BD57B0943CFBE3E5FA45CAC36B8A7E33"}}

4、连接请求串口通讯插件服务：
打开测试网页，输入地址：wss://wrl.zorrosoft.com?sid=668&pid=407F58DA-67A5-4C74-B9F9-44A02A20B205&flag=1 点击连接；
支持的协议功能如下：

A、获取参数
{"req":"SP_Get","rid":1,"para":{"Items":["EventFlag","Base64","CDHolding","CDTimeout","CommID","CommPort","CTSHolding","CTSTimeout","DSRHolding","DSRTimeout","DTREnable","Handshaking","InBufferSize","InBufferCount","Break","InputLen","Interval","NullDiscard","OutBufferSize","OutBufferCount","ParityReplace","PortOpen","RThreshold","RTSEnable","Settings","SThreshold","Output","Input","CommEvent","EOFEnable","InputMode"]}} 
获取指定名称的参数值，可批量获取，也可以获取单个。其中EventFlag默认0，为1时采用事件驱动模式，收到内容自动通知到前端(SP_Event事件)，Base64指定通讯内容是否经过Base64编码后传输，默认0，如果通讯内容是二进制推荐设置为1，Output和Input内容如果Base64设置为1表示是Base64编码后的结果，原通讯控件中布尔值规则1为真，0为假。其它参数都是串口通讯的属性。
返回内容格式如下：
{"ret":0,"rid":1,"data":{"EventFlag":0,"Base64":0,"CDHolding":0,"CDTimeout":0,"CommID":-1,"CommPort":1,"CTSHolding":0,"CTSTimeout":0,"DSRHolding":0,"DSRTimeout":0,"DTREnable":0,"Handshaking":0,"InBufferSize":1024,"InBufferCount":0,"Break":0,"InputLen":0,"Interval":1000,"NullDiscard":0,"OutBufferSize":1024,"OutBufferCount":0,"OutBufferCount":"?","PortOpen":0,"RThreshold":0,"RTSEnable":0,"Settings":"9600,n,8,1","SThreshold":0,"Output":"","Input":"","CommEvent":-4083,"EOFEnable":0,"InputMode":0}} 
请求Items中的每个名称都对应自己名称的值

简单举例1，获取当前操作的COM端口、波特率及是否打开：{"req":"SP_Get","rid":2,"para":{"Items":["PortOpen","CommPort","Settings"]}}
{"ret":0,"rid":2,"data":{"PortOpen":1,"CommPort":1,"Settings":"9600,n,8,1"}}  代表当前打开了COM1端口，使用的波特率是9600,n,8,1
简单举例2，获取端口收到的内容：{"req":"SP_Get","rid":3,"para":{"Items":["Output"]}} 
{"ret":0,"rid":3,"data":{"Output":"OK"}}  代表当前端口收到内容OK

B、设置参数
{"req":"SP_Put","rid":6,"para":{"CommPort":1,"CDTimeout":0,"CTSTimeout":0,"DSRTimeout":0,"DTREnable":0,"Handshaking":0,"InBufferCount":0,"Break":0,"Interval":1000,"NullDiscard":0,"OutBufferCount":0,"OutBufferCount":"?","RThreshold":0,"RTSEnable":0,"SThreshold":0,"CommEvent":0,"EOFEnable":0}} 
设置指定名称的参数值，规则和获取参数类似。
返回内容格式如下：
{"ret":0,"rid":6,"data":{"CommPort":1,"CDTimeout":1,"CTSTimeout":1,"DSRTimeout":1,"DTREnable":1,"Handshaking":1,"InBufferCount":1,"Break":1,"Interval":1,"OutBufferCount":1,"RThreshold":1,"RTSEnable":1,"SThreshold":1,"CommEvent":0,"EOFEnable":1}} 
每个设置结果，在对应的结果中，1成功，0失败

C、指定参数打开端口
EventFlag为1时收到内容自动通知到前端(SP_Event事件)
Base64 接收和发送的内容是否经过Base64编码
CommPort 指定打开的端口序号
Settings 设置波特率等参数如：115200,n,8,1
InBufferSize OutBufferSize 读写缓冲区大小都是1024，
InputLen 设置当前接收区数据长度为0，表示全部读取
InputMode 串口接收数据的模式 0文本，1二进制内容
RThreshold  接收缓冲区有1个以及1个以上字符时，将引发接收数据的OnComm事件
协议举例：
{"req":"SP_Open","rid":15,"para":{"EventFlag":0,"Base64":0,"CommPort":2,"Settings":"115200,n,8,1","InBufferSize":1024,"OutBufferSize":1024,"InputLen":0,"InputMode":0,"RThreshold":16}}
{"ret":0,"rid":19,"data":{"Ret":1,"Code":0}}  Ret为1代表打开成功，Code为错误时错误码

D、读取端口数据
{"req":"SP_Read","rid":18,"para":{}}
如果Base64设置为1，Content为Base64编码后的内容
{"ret":0,"rid":18,"data":{"Content":"OK"}}  取到Content内容为OK

E、写数据端口
如果Base64设置为1，则Content必须是经过Base64编码后的内容(用于二进制流) 写端口：
{"req":"SP_Write","rid":19,"para":{"Content":"AT"}}
{"ret":0,"rid":19,"data":{"Ret":1,"Code":0}}  Ret为1代表关闭成功，Code为错误时错误码

F、关闭端口协议：
{"req":"SP_Close","rid":20,"para":{}}
请求返回：
{"ret":0,"rid":20,"data":{"Ret":1,"Code":0}}  Ret为1代表关闭成功，Code为错误时错误码

5、事件通知
5.1 收到内容通知
{"event":"SP_Rec","data":{"Content":""}} 如果Base64为1，内容Content里是Base64编码后的结果，实际使用时请用Base64编码还原内容

5.2 发送内容通知
{"event":"SP_Send","data":{"Content":""}} 如果Base64为1，内容Content里是Base64编码后的结果，实际使用时请用Base64编码还原内容

5.3  通讯事件通知
{"event":"SP_Event","data":{"ID":""}} "ID为事件类型 1发送事件、3 clear-to-send 线变化、4 data-set ready 线变化、5 carrier detect 线变化、6 振铃检测、7 文件结束

5.3  错误事件通知
{"event":"SSP_Error","data":{"ID":""}} "ID为错误类型：
    comInvalidPropertyValue = 380,无效属性值
    comSetNotSupported = 383,属性为只读
    comGetNotSupported = 394,属性为只写
    comPortOpen = 8000,端口打开时操作不合法
    8001 超时值必须大于 0 
    comPortInvalid = 8002,无效端口号
    8003 属性只在运行时有效
    8004 属性在运行时为只读
    comPortAlreadyOpen = 8005,端口已经打开
    8006 设备标识符无效或不支持该标识符 
    8007 不支持设备的波特率
    8008 指定的字节大小无效
    8009 缺省参数错误
    8010 硬件不可用（被其它设备锁定）
    8011 函数不能分配队列 
    comNoOpen = 8012,设备没有打开
    8013 设备已经打开
    8014 不能使用通信通知 
    comSetCommStateFailed = 8015,不能设置端口状态
    8016 不能设置 comm 事件屏蔽 
    comPortNotOpen = 8018,仅当端口打开时操作才有效
    8019 设备忙
    comReadError = 8020,读端口设备错误
    comDCBError = 8021,为该端口检索设备控制块时的内部错误

    comBreak = 1001,接收到中断信号 
    comCTSTO = 1002, Clear-to-send 超时 
    comDSRTO = 1003,Data-set ready 超时 
    comFrame = 1004,帧错误 
    comOverrun = 1006,端口超速
    comCDTO = 1007,Carrier detect 超时 
    comRxOver = 1008,接收缓冲区溢出 
    comRxParity = 1009,Parity 错误 
    comTxFull = 1010,传输缓冲区满 
    comDCB = 1011检索端口 设备控制块 (DCB) 时的意外错误 
