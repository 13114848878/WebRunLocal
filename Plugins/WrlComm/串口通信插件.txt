串口通信Chrome插件，基于跨平台的插件通用开发框架-牛插中间件(https://github.com/wangzuohuai/WebRunLocal)开发，底层实现调用了微软串口通讯控件MSComm32.ocx。虽然主要适配谷歌浏览器，也可以用在FireFox、Opera、Edge、IE等浏览器中。通过此插件，可以在各种浏览器中通过JS非常方便的操作com口打印机、GSM 猫、手机、串口扫描枪、串口屏显、钱箱等设备。插件中涉及到的属性等含义，请直接参考 微软串口通讯控件MSComm32.ocx中的定义，也可以参考这里：https://www.cnblogs.com/cmooon/articles/2378658.html

以下是体验插件步骤：
1、访问 https://local.zorrosoft.com/ 下载最新的演示版并按TestWrl.txt说明安装好中间件；

2、请求安装串口插件，在页面https://local.zorrosoft.com先连接上中间件服务，然后输入一下内容点击发送：

{"req":"Plugin_Install","rid":1,"para":{"Name":"串口通讯插件","PID":"C0B01CD6-7DD9-4D3C-B668-04168D5236FC","Date":"2019-09-16","Desc":"基于牛插中间之上用于串口通信的Chrome浏览器插件","DownAddr":"http://local.zorrosoft.com/Files/Plugin/WrlComm.pid","MD5":"0AA6150C547D2068E24184B6330D308A","Version":"1.0.1.7","Size":720896,"Type":1,"Cookie":"","Auth":"","TK":"4538087902A5430FE6EB6893CCF4D9E2A0DE751E044FE7B0788958A7E5CDDF0CFF0E5286BAA8998EAF9DB2B5AD124692BBD5D4C4C676CDA3E68A65A4F2E114C6A233195210C1EC3D0711F4F166DF8EDC703F12B07E6BDEC348EDC9A79C81A4A2194A8FA02A2FCCD742DB7C3636B66BAF2D07B0163DE8B7D4A79298D00D690A7A58E361EEBCED4B74943BD25C65E97867D7589C34EFEC6048767CAB82B3F79B3DEC76C002153AEDF2DCCB362CB425BDE8C2B05A3AA25BD48FE7AC3085D2753B77EA23C8738D9357ECE08D7921DE50F29CBBB23E5094CC9F999AE45615E7FCF09B4C16EE32CD4DD0DB93F7794059C9759422B45588FB92A808B47140D0D2914E30"}}

3、请求串口插件更新：

{"req":"Plugin_Update","rid":1,"para":{"Name":"串口通讯插件","PID":"C0B01CD6-7DD9-4D3C-B668-04168D5236FC","Date":"2019-09-16","Desc":"基于牛插中间之上用于串口通信的Chrome浏览器插件","DownAddr":"http://local.zorrosoft.com/Files/Plugin/WrlComm_Update.pid","MD5":"4692AB2197D0C0CD076E3B8140778FAD","Version":"1.0.1.7","Size":557056,"Type":1,"Cookie":"","Auth":"","TK":"83EA92C496CA8F42EEC18B6450FAAE0B059C8477FFFE4202EDE3CC77CDA36C2978D54AA1C922E33C5E0368DC86043D52BFEE6078F15FFFAFA7385F0B2C0D64B417777A869FE4D71629F72FA0E39BFF87AC15935F6D32FBD05BA4FCD19027DB17CC535BA21756975DFD699C362B73A4E3147D0E03C9C181CDA56E4EE555AA3142992FF9EE769C6EB1EEB0404CB6832E44A011EAC5478EF246FE6C4DCC30B68B30598F3CD10FB04491CB5D940A7E094D2F92952643BCBD9DD19AB0F57F1316617213B84F62405D723035474E4CEAD0C42FEBD0A080A2431569D4A3E39843239D252895B93E0A778A6478E04D59894BC5B1556C033CFBF6754D813AF98760AAD258"}}

4、连接请求串口通讯插件服务：
打开测试网页，输入地址：wss://wrl.zorrosoft.com?sid=668&pid=407F58DA-67A5-4C74-B9F9-44A02A20B205&flag=1 点击连接；
支持的协议功能如下：

A、获取参数
{"req":"SP_Get","rid":1,"para":{"Items":["OutFlag","Base64","CDHolding","CDTimeout","CommID","CommPort","CTSHolding","CTSTimeout","DSRHolding","DSRTimeout","DTREnable","Handshaking","InBufferSize","InBufferCount","Break","InputLen","Interval","NullDiscard","OutBufferSize","OutBufferCount","ParityReplace","PortOpen","RThreshold","RTSEnable","Settings","SThreshold","Output","Input","CommEvent","EOFEnable","InputMode"]}} 
获取指定名称的参数值，可批量获取，也可以获取单个。其中OutFlag设置SP_Event通知中未1时是否自动通知到前端，默认0，Base64指定通讯内容是否经过Base64编码后传输，默认0，如果通讯内容是二进制推荐设置为1。其它都是串口通讯的属性，Output和Input内容如果Base64设置为1表示是Base64编码后的结果，原通讯控件中布尔值规则1为真，0为假。
返回内容格式如下：
{"ret":0,"rid":1,"data":{"OutFlag":0,"Base64":0,"CDHolding":0,"CDTimeout":0,"CommID":-1,"CommPort":1,"CTSHolding":0,"CTSTimeout":0,"DSRHolding":0,"DSRTimeout":0,"DTREnable":0,"Handshaking":0,"InBufferSize":1024,"InBufferCount":0,"Break":0,"InputLen":0,"Interval":1000,"NullDiscard":0,"OutBufferSize":512,"OutBufferCount":0,"OutBufferCount":"?","PortOpen":0,"RThreshold":0,"RTSEnable":0,"Settings":"9600,n,8,1","SThreshold":0,"Output":"","Input":"","CommEvent":-4083,"EOFEnable":0,"InputMode":0}} 
请求Items中的每个名称都对应自己名称的值

B、设置参数
{"req":"SP_Put","rid":2,"para":{"OutFlag":0,"Base64":0,"CDHolding":0,"CDTimeout":0,"CommID":-1,"CommPort":1,"CTSHolding":0,"CTSTimeout":0,"DSRHolding":0,"DSRTimeout":0,"DTREnable":0,"Handshaking":0,"InBufferSize":1024,"InBufferCount":0,"Break":0,"InputLen":0,"Interval":1000,"NullDiscard":0,"OutBufferSize":512,"OutBufferCount":0,"OutBufferCount":"?","PortOpen":0,"RThreshold":0,"RTSEnable":0,"Settings":"9600,n,8,1","SThreshold":0,"Output":"","Input":"","CommEvent":-4083,"EOFEnable":0,"InputMode":0}} 
设置指定名称的参数值，规则和获取参数类似，Output和Input设置内容如果Base64设置为1，则必须是经过Base64编码后的内容。
返回内容格式如下：
{"ret":0,"rid":2,"data":{"OutFlag":1,"Base64":1,"CDHolding":0,"CDTimeout":1,"CommID":0,"CommPort":1,"CTSHolding":0,"CTSTimeout":1,"DSRHolding":0,"DSRTimeout":1,"DTREnable":1,"Handshaking":1,"InBufferSize":1,"InBufferCount":1,"Break":1,"InputLen":1,"Interval":1,"OutBufferSize":1,"OutBufferCount":1,"PortOpen":0,"RThreshold":1,"RTSEnable":1,"Settings":1,"SThreshold":1,"CommEvent":0,"EOFEnable":1,"InputMode":1}} 
每个设置结果，在对应的结果中，1成功，0失败

5、事件通知
5.1 收到内容通知
{"event":"SP_Input","data":{"Content":""}} 如果Base64为1，内容Content里是Base64编码后的结果，实际使用时请用Base64编码还原内容

5.2 发送内容通知
{"event":"SP_Output","data":{"Content":""}} 如果Base64为1，内容Content里是Base64编码后的结果，实际使用时请用Base64编码还原内容

5.3  通讯事件通知
{"event":"SP_Event","data":{"ID":""}} "ID为事件类型 1发送事件、3 clear-to-send 线变化、4 data-set ready 线变化、5 carrier detect 线变化、6 振铃检测、7 文件结束

5.3  错误事件通知
{"event":"SSP_Error","data":{"ID":""}} "ID为错误类型：
    comInvalidPropertyValue = 380,无效属性值
    comSetNotSupported = 383,属性为只读
    comGetNotSupported = 394,属性为只写
    comPortOpen = 8000,端口打开时操作不合法
    8001 超时值必须大于 0 
    comPortInvalid = 8002,无效端口号
    8003 属性只在运行时有效
    8004 属性在运行时为只读
    comPortAlreadyOpen = 8005,端口已经打开
    8006 设备标识符无效或不支持该标识符 
    8007 不支持设备的波特率
    8008 指定的字节大小无效
    8009 缺省参数错误
    8010 硬件不可用（被其它设备锁定）
    8011 函数不能分配队列 
    comNoOpen = 8012,设备没有打开
    8013 设备已经打开
    8014 不能使用通信通知 
    comSetCommStateFailed = 8015,不能设置端口状态
    8016 不能设置 comm 事件屏蔽 
    comPortNotOpen = 8018,仅当端口打开时操作才有效
    8019 设备忙
    comReadError = 8020,读端口设备错误
    comDCBError = 8021,为该端口检索设备控制块时的内部错误

    comBreak = 1001,接收到中断信号 
    comCTSTO = 1002, Clear-to-send 超时 
    comDSRTO = 1003,Data-set ready 超时 
    comFrame = 1004,帧错误 
    comOverrun = 1006,端口超速
    comCDTO = 1007,Carrier detect 超时 
    comRxOver = 1008,接收缓冲区溢出 
    comRxParity = 1009,Parity 错误 
    comTxFull = 1010,传输缓冲区满 
    comDCB = 1011检索端口 设备控制块 (DCB) 时的意外错误 
